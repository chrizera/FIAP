package br.com.fiap.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import br.com.fiap.beans.Cargo;
import br.com.fiap.conexao.ConexaoFactory;
import br.com.fiap.excecoes.Excecao;

/**
 * Na documentacao,. voce inicia desenvolvendo uma aplicacao sucinto 
 * do seu projeto. Neste espcao onde voce pode utilizar as tags 
 * de HTML, como por exemplo, a <code> tag </code> ou ainda deixar um
 * <i> italico </i> e etc
 * @since 1.0
 * @author rm75949 - Christian
 * @see Cargo
 * @see CargoBO
 *
 */

public class CargoDAO {

	//private Connection conexao;

	/*public CargoDAO(String usuario, String senha) throws Exception {
		this.conexao = new ConexaoFactory().getConnection(usuario, senha);
	}*/
	
	/**
	 * Metodo que <b>adiciona</b> uma tupla na tabela TB_CARGO
	 * @param c Objeto da classe Cargo
	 * @throws Exception
	 * @author rm75949 - Christian
	 * @see Cargo
	 * 
	 */
	public void gravar(Cargo c, Connection conexao) throws Exception{
		String sql = "insert into TB_CARGO " + " (NM_CARGO, DS_NIVEL, VL_SALARIO) values (?,?,?)";
		PreparedStatement estrutura = conexao.prepareStatement(sql);
		estrutura.setString(1, c.getCargo());
		estrutura.setString(2, c.getNivel());
		estrutura.setDouble(3, c.getSalario());
		estrutura.execute();
		estrutura.close();
	}

	/**
	 * Metodo que exibe o conteudo gravado na tabela TB_CARGO depois de 
	 * salvar tudo em uma lista
	 * @return lista com o conteudo salvo
	 * @throws Exception
	 */
	public List<Cargo> getLista(Connection conexao) throws Exception{
		List<Cargo> lstCargos = new ArrayList<Cargo>();
		PreparedStatement estrutura = conexao.prepareStatement("select * from TB_CARGO");
		ResultSet resultadoDados = estrutura.executeQuery();

		while(resultadoDados.next()){
			Cargo cargo = new Cargo();
			cargo.setCargo(resultadoDados.getString("NM_CARGO"));
			cargo.setNivel(resultadoDados.getString("DS_NIVEL"));
			cargo.setSalario(resultadoDados.getDouble("VL_SALARIO"));
			lstCargos.add(cargo);
		}
		resultadoDados.close();
		estrutura.close();
		return lstCargos;
	}

	public List<Cargo> consultar(String pCargo, Connection conexao)throws Exception{
		List<Cargo> lista = new ArrayList<Cargo>();
		PreparedStatement estrutura = conexao.prepareStatement("SELECT * FROM TB_CARGO WHERE NM_CARGO = ?");
		estrutura.setString(1, pCargo);
		ResultSet resultado = estrutura.executeQuery();
		while(resultado.next()){
			lista.add(new Cargo(resultado.getInt("CD_CARGO"),resultado.getString("NM_CARGO"), resultado.getString("DS_NIVEL"), resultado.getDouble("VL_SALARIO")));
		}
		resultado.close();
		estrutura.close();
		return lista;
	}
	
	public void deletar(String cargoDigitado, Connection conexao) throws Exception{
		PreparedStatement estrutura = conexao.prepareStatement("delete TB_CARGO where NM_CARGO = ?");
		estrutura.setString(1, cargoDigitado);
		estrutura.execute();
		estrutura.close();
	}
	
	public int atualizar(double aumento, Connection conexao) throws Exception {
		PreparedStatement estrutura = conexao.prepareStatement("update TB_CARGO set VL_SALARIO = VL_SALARIO*(1 + ?)");
		estrutura.setDouble(1, aumento/100);
		int saida = estrutura.executeUpdate();
		estrutura.close();
		return saida;
	}
	
	/*public void fecharConexao() throws Exception {
		this.conexao.close();
	}*/
}
/*
  preparedstatement -> parametros
  statement -> concatenacao
  execute() -> insert,delete, update
  executeQuery()->select*/ //só ele gera o ResultSet

/*
 DriverManager = gera a conexao atras do .getConnection(url)
 Connection = armazena a conexao e gera uma estrutura
  prepareStatement(sql) ou createStatement()
 PreparedStatement = permite parametrizar
 Statement = utiliza concatenacao (sqliNJECTION)
  execute() -> insert,delete,update
  executeQuery() - select


 */