---------------------------------------------------
-- Respostas as questões dos exercícos - AULA 21 --
---------------------------------------------------


-- 1.) UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DO REGISTRO ABAIXO NA TABELA CLIENTE.
-- CÓDIGO DO CLIENTE = 1
-- NOME DO CLIENTE = 'MARIA DAS DORES'
-- DATA DE NASCIMENTO = 21/04/1987
-- SEXO = 'F'
-- CPF = 92876345-01
-- RG = 21356789-X
-- DESCRIÇÃO DE EMAIL = MARIAJOSE@MARIAJOSE.COM.BR

-- Utilize as instruções:
-- FUNÇÃO TO_DATE('<DATE>','<FORMAT>') NO MOMENTO DA INSERÇÃO DA DATA DE NASCIMENTO
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO

INSERT INTO T_SPV_CLIENTE 
    (cd_cliente, nm_cliente, dt_nascimento, ds_sexo, nr_cpf, nr_cpf_dig, nr_rg, nr_rg_dig, ds_email) 
  VALUES 
    (1,'MARIA DAS DORES', TO_DATE('21/04/1987','DD/MM/YYYY'), 'F', 92876345, 01, 21356789, 'X','MARIAJOSE@MARIAJOSE.COM.BR');
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_CLIENTE;  

-- 2.) TENTE EXECUTAR A MESMA INSTRUÇÃO DE INSERÇÃO DO EXERCÍCIO ANTERIOR. 
-- A INSERÇÃO FOI REALIZADA COM SUCESSO? 
-- QUAL FOI A MENSAGEM DE ERRO EXIBIDA?
-- JUSTIFIQUE OS MOTIVOS PELO QUAL A INSERÇÃO NÃO FOI REALIZADA COM SUCESSO.

-- NÃO.
-- MENSAGEM: Erro de SQL: ORA-00001: restrição exclusiva (RITA.PK_SPV_CLIENTE) violada
-- JUSTIFICATIVA: A CONSTRAINT CHAVE PRIMÁRIA FOI VIOLADA, OU SEJA, NÃO É POSSÍVEL INSERIR UM
-- REGISTRO COM UM VALOR (CHAVE.) JÁ EXISTENTE NA TABELA

-- 3.) UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DO REGISTRO ABAIXO NA TABELA CLIENTE.
-- CÓDIGO DO CLIENTE = 2
-- NOME DO CLIENTE = 'MARIA DE DEUS'
-- DATA DE NASCIMENTO = 09/03/1991
-- SEXO = 'A'
-- CPF = 123456789-01
-- RG = 123456789-X
-- DESCRIÇÃO DE EMAIL = MARIADEDEUS@DEDEUS.COM.BR

-- A INSERÇÃO FOI REALIZADA COM SUCESSO? 
-- QUAL FOI A MENSAGEM DE ERRO EXIBIDA?
-- JUSTIFIQUE OS MOTIVOS PELO QUAL A INSERÇÃO NÃO FOI REALIZADA COM SUCESSO.

INSERT INTO T_SPV_CLIENTE 
    (cd_cliente, nm_cliente, dt_nascimento, ds_sexo, nr_cpf, nr_cpf_dig, nr_rg, nr_rg_dig, ds_email) 
  VALUES 
    (2,'MARIA DE DEUS', TO_DATE('09/03/1991','DD/MM/YYYY'), 'A', 123456789, 01, 123456789, 'X','MARIADEDEUS@DEDEUS.COM.BR');

-- NÃO.
-- ERRO: Erro de SQL: ORA-02290: restrição de verificação (RITA.CK_SPV_CLIENTE_SEXO) violada
-- JUSTIFICATIVA: A CONSTRAINT CHECK FOI VIOLADA. NÃO É POSSÍVEL INSERIR UM VALOR DIFERENTE DE 'F' OU 'M'.

-- 4.)UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DO REGISTRO ABAIXO NA TABELA CLIENTE.
-- CÓDIGO DO CLIENTE = 3
-- NOME DO CLIENTE = 'JOÃO DA SILVA'
-- DATA DE NASCIMENTO = 08/09/1991
-- SEXO = 'M'
-- CPF = 12387654-31
-- RG = 98765432-1
-- DESCRIÇÃO DE EMAIL = NULL 

-- Utilize as instruções:
-- FUNÇÃO TO_DATE('<DATE>','<FORMAT>') NO MOMENTO DA INSERÇÃO DA DATA DE NASCIMENTO
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- OBSERVAÇÃO: O CAMPO 'DS_EMAIL' DEVE ESTAR DECLARADO EXPLICITAMENTE NO COMANDO.

INSERT INTO T_SPV_CLIENTE 
    (cd_cliente, nm_cliente, dt_nascimento, ds_sexo, nr_cpf, nr_cpf_dig, nr_rg, nr_rg_dig, ds_email) 
  VALUES 
    (3,'JOÃO DA SILVA', TO_DATE('08/09/1991','DD/MM/YYYY'), 'M', 12387654,31, 98765432,1,NULL);
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_CLIENTE; 

-- 5.)UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DO REGISTRO ABAIXO NA TABELA CLIENTE.
-- CÓDIGO DO CLIENTE = 3
-- NOME DO CLIENTE = 'JOÃO DA SILVA'
-- DATA DE NASCIMENTO = 08/09/1991
-- SEXO = 'M'
-- CPF = 12387654-31
-- RG = 98765432-1
-- DESCRIÇÃO DE EMAIL = NULL 

-- Utilize as instruções:
-- FUNÇÃO TO_DATE('<DATE>','<FORMAT>') NO MOMENTO DA INSERÇÃO DA DATA DE NASCIMENTO
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- OBSERVAÇÃO: OMITA O CAMPO 'DS_EMAIL' DURANTE A DECLARAÇÃO DO COMANDO.
-- ATENÇÃO: SÓ É POSSÍVEL OMITIR UM CAMPO NÃO OBRIGATÓRIO, OU SEJA, NULL.

INSERT INTO T_SPV_CLIENTE 
    (cd_cliente, nm_cliente, dt_nascimento, ds_sexo, nr_cpf,  nr_cpf_dig, nr_rg, nr_rg_dig) 
  VALUES 
    (4,'JOAQUIM XAVIER', TO_DATE('21/04/1988','DD/MM/YYYY'), 'M', 213141516, 11, 198273641,'X');
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_CLIENTE;  

-- 6.) UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DOS REGISTROS ABAIXO NA TABELA UNIDADE DE MEDIDA.
-- Utilize as instruções:
-- INSERT ALL PARA REALIZAR A INSERÇÃO DE VÁRIOS REGISTROS ATRAVÉS DE UMA ÚNICA INSTRUÇÃO INSERT
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO

INSERT ALL
  INTO T_SPV_UNIDADE_MEDIDA (cd_unidade_medida, ds_sigla, ds_unidade_medida) VALUES (1,'CXA', 'CAIXA')
  INTO T_SPV_UNIDADE_MEDIDA (cd_unidade_medida, ds_sigla, ds_unidade_medida) VALUES (2,'PCT', 'PACOTE')
  INTO T_SPV_UNIDADE_MEDIDA (cd_unidade_medida, ds_sigla, ds_unidade_medida) VALUES (3,'PCA', 'PEÇA')
  INTO T_SPV_UNIDADE_MEDIDA (cd_unidade_medida, ds_sigla, ds_unidade_medida) VALUES (4,'MAQ', 'MAQUINA')
  INTO T_SPV_UNIDADE_MEDIDA (cd_unidade_medida, ds_sigla, ds_unidade_medida) VALUES (5,'EQP', 'EQUIPAMENTO')
SELECT * FROM DUAL;  
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_UNIDADE_MEDIDA;

-- 7.) CRIE UMA TABELA IGUAL A TABELA UNIDADE DE MEDIDA:
-- EXECUTE OS COMANDOS ABAIXO:
CREATE TABLE T_SPV_UNIDADE_MEDIDA_COPY 
    ( 
     cd_unidade_medida    NUMBER (2)      NOT NULL , 
     ds_sigla             CHAR (3)        NOT NULL , 
     ds_unidade_medida    VARCHAR2 (30)   NOT NULL 
    );

ALTER TABLE T_SPV_UNIDADE_MEDIDA_COPY
    ADD CONSTRAINT PK_SPV_UNID_MEDIDA_COPY PRIMARY KEY ( cd_unidade_medida ) ;
    
-- UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO, A PARTIR DE UMA SUBQUERY.
-- TRANSFIRA TODOS OS REGISTROS DA TABELA "T_SPV_UNIDADE_MEDIDA" PARA A TABELA
-- "T_SPV_UNIDADE_MEDIDA_COPY".

INSERT INTO T_SPV_UNIDADE_MEDIDA_COPY
	 (cd_unidade_medida, ds_sigla, ds_unidade_medida) 
 (SELECT cd_unidade_medida, ds_sigla, ds_unidade_medida FROM T_SPV_UNIDADE_MEDIDA);
 

-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_UNIDADE_MEDIDA_COPY; 

-- 8.) CRIE A TABELA ABAIXO, CONTENDO ENTRE OUTRAS CONSTRAINTS A CONSTRAINT DEFAULT:
-- EXECUTE OS COMANDOS ABAIXO:

CREATE TABLE T_AULA21_TESTE 
    ( 
     cd_teste       NUMBER (2)      NOT NULL , 
     ds_teste       VARCHAR2 (30)   NOT NULL , 
     dt_realizacao  DATE            DEFAULT SYSDATE
    );

ALTER TABLE T_AULA21_TESTE 
    ADD CONSTRAINT PK_AULA21_TESTE PRIMARY KEY ( cd_teste ) ;

-- RESPONDA AS QUESTÕES ABAIXO:
-- A.)UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DOS REGISTROS ABAIXO NA TABELA TESTE.
-- CÓDIGO TESTE = 1
-- DESCRIÇÃO DO TESTE = 'TESTE 1'
-- DATA REALIZAÇÃO DO TESTE = NULL
-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- A INSERÇÃO FOI REALIZADA COM SUCESSO? 
-- O QUE FOI ARMAZENADO NA COLUNA 'DT_REALIZACAO' ?

INSERT INTO T_AULA21_TESTE 
  (cd_teste, ds_teste, dt_realizacao) values (1,'TESTE 1', NULL);  
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_AULA21_TESTE; 

-- SIM.
-- FOI ARMAZENADO NULL, UMA VEZ QUE A COLUNA TEM SEU CONTEÚDO NÃO OBRIGATÓRIO.

-- B.)UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DOS REGISTROS ABAIXO NA TABELA TESTE.
-- CÓDIGO TESTE = 2
-- DESCRIÇÃO DO TESTE = 'TESTE 2'
-- DATA REALIZAÇÃO DO TESTE = DEFAULT
-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- A INSERÇÃO FOI REALIZADA COM SUCESSO? 
-- O QUE FOI ARMAZENADO NA COLUNA 'DT_REALIZACAO' ?

INSERT INTO T_AULA21_TESTE 
  (cd_teste, ds_teste, dt_realizacao) values (2,'TESTE 2', DEFAULT);  
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_AULA21_TESTE;   

-- SIM.
-- FOI INSERIDO O VALOR DEFAULT, UMA VEZ QUE A COLUNA POSSUI UM 
-- VALOR DEFAULT NA DECLARAÇÃO DA SUA ESTRUTURA.

-- C.)UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DOS REGISTROS ABAIXO NA TABELA TESTE.
-- CÓDIGO TESTE = 3
-- DESCRIÇÃO DO TESTE = 'TESTE 3'
-- DATA REALIZAÇÃO DO TESTE = 10/08/2013
-- Utilize as instruções:
-- FUNÇÃO TO_DATE('<DATE>','<FORMAT>') NO MOMENTO DA INSERÇÃO DA DATA DA REALIZAÇÃO DO TESTE
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- A INSERÇÃO FOI REALIZADA COM SUCESSO? 
-- O QUE FOI ARMAZENADO NA COLUNA 'DT_REALIZACAO' ?

INSERT INTO T_AULA21_TESTE 
  (cd_teste, ds_teste, dt_realizacao) values (3,'TESTE 3', TO_DATE('10/08/2013','DD/MM/YYYY'));  
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_AULA21_TESTE;  
-- SIM
-- FOI ARMAZENADA A DATA INFORMADA PELO USUÁRIO. O VALOR DEFAULT SÓ SERÁ INSERIDO,
-- CASO NÃO SEJA INFORMADO UM VALOR OU DECLARADO EXPLICITAMENTE O VALOR DEFAULT.

-- D.)UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DOS REGISTROS ABAIXO NA TABELA TESTE.
-- CÓDIGO TESTE = 4
-- DESCRIÇÃO DO TESTE = 'TESTE 4'
-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- ATENÇÃO: OMITA O CAMPO 'DT_REALIZACAO' DURANTE A DECLARAÇÃO DO COMANDO
-- A INSERÇÃO FOI REALIZADA COM SUCESSO? 
-- O QUE FOI ARMAZENADO NA COLUNA 'DT_REALIZACAO' ?

INSERT INTO T_AULA21_TESTE 
  (cd_teste, ds_teste) values (4,'TESTE 4');  
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_AULA21_TESTE; 

-- SIM.
-- FOI ARMAZENADO O VALOR DEFAULT, UMA VEZ QUE A COLUNA 'DT_REALIZACAO' FOI OMITIDA
-- DURANTE A INSERÇÃO DOS DADOS.

-- E.)UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DOS REGISTROS ABAIXO NA TABELA TESTE.
-- CÓDIGO TESTE = 5
-- DESCRIÇÃO DO TESTE = 'TESTE 5'
-- DATA REALIZAÇÃO DO TESTE = sysdate
-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- A INSERÇÃO FOI REALIZADA COM SUCESSO? 
-- O QUE FOI ARMAZENADO NA COLUNA 'DT_REALIZACAO' ?

INSERT INTO T_AULA21_TESTE 
  (cd_teste, ds_teste, dt_realizacao) values (5,'TESTE 5',sysdate);  
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_AULA21_TESTE; 

-- SIM.
-- FOI ARMAZENADO A DATA DO SISTEMA. O VALOR DEFAULT SÓ SERÁ INSERIDO,
-- CASO NÃO SEJA INFORMADO UM VALOR OU DECLARADO EXPLICITAMENTE O VALOR DEFAULT.

-- 9.) UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DOS REGISTROS ABAIXO NA TABELA PRODUTO.
-- CADASTRE 3 PRODUTOS ASSOCIADOS A UNIDADE DE MEDIDA JÁ CADASTRADA "CAIXA".
-- CÓDIGO DO PRODUTO = 1
-- CÓDIGO DA UNIDADE DE MEDIDA = <VERIFIQUE O CÓDIGO CORRESPONDENTE>
-- DESCRIÇÃO DO PRODUTO = 'NOTEBOOK SENSACIONAL'
-- DESCRIÇÃO COMPLETA DO PRODUTO = 'NOTEBOOK XPTO SUPER ESPECIAL'
-- QUANTIDADE EM ESTOQUE = 3
-- VALOR DO PREÇO UNITÁRIO = 1980.56

-- CÓDIGO DO PRODUTO = 2
-- CÓDIGO DA UNIDADE DE MEDIDA = <VERIFIQUE O CÓDIGO CORRESPONDENTE>
-- DESCRIÇÃO DO PRODUTO = 'IMPRESSORA X3'
-- DESCRIÇÃO COMPLETA DO PRODUTO = 'IMPRESSORA MULTIFUNCIONAL HP'
-- QUANTIDADE EM ESTOQUE = 5
-- VALOR DO PREÇO UNITÁRIO = 432.89

-- CÓDIGO DO PRODUTO = 3
-- CÓDIGO DA UNIDADE DE MEDIDA = <VERIFIQUE O CÓDIGO CORRESPONDENTE>
-- DESCRIÇÃO DO PRODUTO = 'PEN DRIVE - 16GB'
-- DESCRIÇÃO COMPLETA DO PRODUTO = 'PEN DRIVE 16GB KINGSTON'
-- QUANTIDADE EM ESTOQUE = 10
-- VALOR DO PREÇO UNITÁRIO = 60.00


-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO

INSERT INTO T_SPV_PRODUTO 
    (cd_produto, cd_unidade_medida, ds_produto, ds_completa_produto, qt_estoque, vl_preco_unitario) 
  VALUES 
    (1,1,'NOTEBOOK SENSACIONAL', 'NOTEBOOK XPTO SUPER ESPECIAL', 3, 1980.56);

INSERT INTO T_SPV_PRODUTO 
    (cd_produto, cd_unidade_medida,ds_produto,ds_completa_produto,qt_estoque,vl_preco_unitario) 
  VALUES 
    (2,1, 'IMPRESSORA X3', 'IMPRESSORA MULTIFUNCIONAL HP', 5, 432.89);

INSERT INTO T_SPV_PRODUTO 
    (cd_produto, cd_unidade_medida,ds_produto,ds_completa_produto,qt_estoque,vl_preco_unitario) 
  VALUES 
    (3,1, 'PEN DRIVE - 16GB', 'PEN DRIVE 16GB KINGSTON', 10, 60.00);

-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_PRODUTO ; 

-- 10.)UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A INSERÇÃO DOS REGISTROS ABAIXO NA TABELA PRODUTO.
-- CADASTRE 1 PRODUTO ASSOCIADOS A UMA UNIDADE DE MEDIDA NÃO CADASTRADA.
-- CÓDIGO DO PRODUTO = 4
-- CÓDIGO DA UNIDADE DE MEDIDA = 7
-- DESCRIÇÃO DO PRODUTO = 'HD EXTERNO - 500GB'
-- DESCRIÇÃO COMPLETA DO PRODUTO = 'D EXTERNO SANSUMG - 500 GB'
-- QUANTIDADE EM ESTOQUE = 10
-- VALOR DO PREÇO UNITÁRIO = 305.00  

-- A INSERÇÃO FOI REALIZADA COM SUCESSO? 
-- QUAL FOI A MENSAGEM DE ERRO EXIBIDA?
-- JUSTIFIQUE OS MOTIVOS PELO QUAL A INSERÇÃO NÃO FOI REALIZADA COM SUCESSO.

INSERT INTO T_SPV_PRODUTO 
    (cd_produto, cd_unidade_medida,ds_produto,ds_completa_produto,qt_estoque,vl_preco_unitario) 
  VALUES 
    (4,4, 'HD EXTERNO - 500GB', 'HD EXTERNO SANSUMG - 500 GB', 10, 305.00);
    
-- NÃO.
-- ERRO:  Erro de SQL: ORA-02291: restrição de integridade (RITA.FK_SPV_PRODUTO_UNID) violada - chave mãe não localizada
-- JUSTIFICATIVA: A CONSTRAINT CHAVE ESTRANGEIRA FOI VIOLADA. 
-- A INSERÇÃO NÃO FOI REALIZADA, POIS O CONTEÚDO DO CAMPO 'CD_UNIDADE_MEDIDA' (CHAVE ESTRANGEIRA) NÃO FOI ENCONTRADO.
-- LEMBRE-SE A CHAVE ESTRANGEIRA SEMPRE DEVE ESTAR ASSOCIADA A UMA CHAVE PRIMÁRIA VÁLIDA.


-- 11.) UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A ALTERAÇÃO DOS REGISTROS ABAIXO NA TABELA PRODUTO.
-- O PREÇO DE TODOS OS PRODUTOS CUJA UNIDADE DE MEDIDA É "CAIXA", SOFRERAM UMA CORREÇÃO DE PREÇOS EM 15%
-- EM RELAÇÃO AO SEU VALOR ATUAL.
-- ELABORE A INSTRUÇÃO SQL QUE REALIZARÁ O REAJUSTE DE PREÇOS DESTES PRODUTOS.

-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- OBSERVAÇÃO: REALIZE A CONSULTA ANTES DE EXECUTAR O COMANDO PARA QUE CONSIGA VALIDAR A ALTERAÇÃO

UPDATE    T_SPV_PRODUTO
  SET     VL_PRECO_UNITARIO = VL_PRECO_UNITARIO * 1.15
  WHERE   CD_UNIDADE_MEDIDA = 1;  
  -- OU UTILIZE:
  --      DS_UNIDADE_MEDIDA = 'CAIXA';

-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_PRODUTO ; 

-- 12.)  UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A ALTERAÇÃO DOS REGISTROS ABAIXO NA TABELA PRODUTO.
-- O PRODUTO DE CÓDIGO 2 (IMPRESSORA X3), TEVE SUA UNIDADE DE MEDIDA ALTERADA PARA "EQUIPAMENTO": 
-- ELABORE A INSTRUÇÃO SQL QUE REALIZARÁ O AJUSTE DA UNIDADE DE MEDIDA DESTE PRODUTO.

-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- OBSERVAÇÃO: REALIZE A CONSULTA ANTES DE EXECUTAR O COMANDO PARA QUE CONSIGA VALIDAR A ALTERAÇÃO 

UPDATE    T_SPV_PRODUTO
  SET     CD_UNIDADE_MEDIDA = 5
  WHERE   CD_PRODUTO= 2;  
  
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_PRODUTO ;   

-- 13.)  UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A ALTERAÇÃO DOS REGISTROS ABAIXO NA TABELA PRODUTO.
-- FORAM REALIZADAS COMPRAS PARA TODOS OS PRODUTOS COM QUANTIDADE EM ESTOQUE INFERIOR A 5 UNIDADES
-- PARA EFEITO DE REPOSIÇÃO DO ESTOQUE.
-- POR PROBLEMAS DE ESPAÇO FÍSICO NÃO FORAM COMPRADOS PRODUTOS REFERENTES A UNIDADE DE MEDIDA
-- IGUAL A 'EQUIPAMENTO', MESMO QUE A QUANTIDADE EM ESTOQUE TENHA MENOS DE 5 UNIDADES.
-- FORAM COMPRADAS DEZ(10) UNIDADES PARA CADA PRODUTO EM QUESTÃO.
-- ELABORE A INSTRUÇÃO SQL QUE REALIZARÁ A ALTERAÇÃO DA QUANTIDADE EM ESTOQUE DOS PRODUTOS EM QUESTÃO.

-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- OBSERVAÇÃO: REALIZE A CONSULTA ANTES DE EXECUTAR O COMANDO PARA QUE CONSIGA VALIDAR A ALTERAÇÃO 

UPDATE    T_SPV_PRODUTO
  SET     QT_ESTOQUE = QT_ESTOQUE + 10
  WHERE   (QT_ESTOQUE < 5) AND (CD_UNIDADE_MEDIDA<>5); 
  
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_PRODUTO ;

-- 14.)  UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A ALTERAÇÃO DOS REGISTROS ABAIXO NA TABELA ITEM_NOTA_FISCAL.
-- O PREÇO DE TODOS OS PRODUTOS CUJA UNIDADE DE MEDIDA É "CAIXA", SOFRERAM CORREÇÃO DE PREÇOS EM 15%
-- EM RELAÇÃO AO SEU VALOR ATUAL.
-- SERÁ NECESSÁRIO ATUALIZAR O PREÇO UNITÁRIO DE TODOS OS PRODUTOS VENDIDOS A PARTIR DE 15/08/2014.
-- ELABORE A INSTRUÇÃO SQL QUE REALIZARÁ O REAJUSTE DE PREÇOS DESTES PRODUTOS.

-- Utilize as instruções:
-- FUNÇÃO TO_DATE('<DATE>','<FORMAT>') 
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- UTILIZE SUBQUERY PARA ESCREVER A INSTRUÇÃO (UTILIZE PARA VALIDAR A NOTA FISCAL EM QUESTÃO - CLÁUSULA WHERE)
-- OBSERVAÇÃO: REALIZE A CONSULTA ANTES DE EXECUTAR O COMANDO PARA QUE CONSIGA VALIDAR A ALTERAÇÃO 

UPDATE    T_SPV_ITEM_NOTA_FISCAL
  SET     VL_PRECO_UNITARIO = VL_PRECO_UNITARIO * 1.15          
  WHERE   NR_NOTA_FISCAL = 
          ( SELECT NR_NOTA_FISCAL FROM T_SPV_NOTA_FISCAL WHERE DT_EMISSAO >= TO_DATE('15/08/2014','DD/MM/YYYY'));
  
  -- WHERE to_char(DT_EMISSAO 
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_ITEM_NOTA_FISCAL ;

SELECT * FROM T_SPV_NOTA_FISCAL ;

SELECT * FROM T_SPV_PRODUTO;

-- 15.)  UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A ALTERAÇÃO DOS REGISTROS ABAIXO NA TABELA NOTA_FISCAL.
-- DEVIDO A ALTERAÇÃO DE PREÇOS NA TABELA ITEM_NOTA_FISCAL (EXERCÍCIO ANTERIOR), 
-- SERÁ NECESSÁRIO CORRIGIR O VALOR TOTAL DA NOTA FISCAL.
-- APLIQUE AUMENTO DE 15% NO VALOR TOTAL DA NOTA FISCAL
-- ELABORE A INSTRUÇÃO SQL QUE REALIZARÁ O REAJUSTE DO VALOR TOTAL DESTA NOTA FISCAL.

-- Utilize as instruções:
-- FUNÇÃO TO_DATE('<DATE>','<FORMAT>') 
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- UTILIZE SUBQUERY PARA ESCREVER A INSTRUÇÃO (UTILIZE PARA VALIDAR A NOTA FISCAL EM QUESTÃO - CLÁUSULA WHERE)
-- OBSERVAÇÃO: REALIZE A CONSULTA ANTES DE EXECUTAR O COMANDO PARA QUE CONSIGA VALIDAR A ALTERAÇÃO 

UPDATE    T_SPV_NOTA_FISCAL
  SET     VL_TOTAL_NF = VL_TOTAL_NF * 1.15          
  WHERE   DT_EMISSAO >= TO_DATE('15/08/2014','DD/MM/YYYY');
  
-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_NOTA_FISCAL ;

-- 16.) UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A ALTERAÇÃO DOS REGISTROS ABAIXO NA TABELA NOTA_FISCAL.
-- PRECISAMOS ALTERAR OS CLIENTES ASSOCIADOS AS NOTAS FISCAIS 1234 E 1235 DEVIDO A UM ERRO NO MOMENTO DO CADASTRO.
-- O CLIENTE A SER ASSOCIADO A ESTAS NOTAS FISCAIS, POSSUI CÓDIGO DO CLIENTE IGUAL A 678.
-- ELABORE A INSTRUÇÃO SQL QUE REALIZARÁ A ALTERAÇÃO DOS CLIENTES.

-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- OBSERVAÇÃO: REALIZE A CONSULTA ANTES DE EXECUTAR O COMANDO PARA QUE CONSIGA VALIDAR A ALTERAÇÃO
-- RESPONDA:
-- A ALTERAÇÃO FOI REALIZADA COM SUCESSO? 
-- QUAL FOI A MENSAGEM DE ERRO EXIBIDA?
-- JUSTIFIQUE OS MOTIVOS PELO QUAL A ALTERAÇÃO NÃO FOI REALIZADA COM SUCESSO.

UPDATE    T_SPV_NOTA_FISCAL
  SET     CD_CLIENTE=678          
  WHERE   NR_NOTA_FISCAL=1234 OR NR_NOTA_FISCAL=1235;
  
-- NÃO.
-- ERRO: Erro de SQL: ORA-02291: restrição de integridade (RITA.FK_SPV_CLI_NF) violada - chave mãe não localizada
-- JUSTIFICATIVA: A CONSTRAINT FOREIGN KEY FOI VIOLADA. 
-- NÃO É POSSÍVEL REALIZAR A ALTERAÇÃO POIS O CÓDIGO DO CLIENTE INFORMADO NÃO EXISTE NA TABELA ORIGEM 
-- (NÃO EXISTE O VALOR PARA CHAVE PRIMÁRIA CORRESPONDENTE).


-- 17.) UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A DELEÇÃO DOS REGISTROS ABAIXO NA TABELA UNIDADE DE MEDIDA.
-- VERIFICAMOS NOSSOS ESTOQUES E PERCEBEMOS QUE NÃO COMERCIALIZAMOS A ALGUM TEMPO PRODUTOS
-- COM UNIDADE DE MEDIDA IGUAL A 'PEÇA'.
-- EM FUNÇÃO DISTO NECESSITTAMOS ELIMINAR ESTA UNIDADE DE MEDIDA DE NOSSO CADASTRO.
-- ELABORE A INSTRUÇÃO SQL QUE REALIZARÁ A ELIMINAÇÃO DA UNIDADE DE MEDIDA.

-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- OBSERVAÇÃO: REALIZE A CONSULTA ANTES DE EXECUTAR O COMANDO PARA QUE CONSIGA VALIDAR A ALTERAÇÃO


DELETE FROM T_SPV_UNIDADE_MEDIDA WHERE CD_UNIDADE_MEDIDA=3;
--OU
DELETE FROM T_SPV_UNIDADE_MEDIDA WHERE DS_UNIDADE_MEDIDA='PEÇA';

-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_UNIDADE_MEDIDA ;

-- 18.) UTILIZE A INSTRUÇÃO SQL PARA REALIZAR A DELEÇÃO DOS REGISTROS ABAIXO NA TABELA NOTA FISCAL.
-- HOUVE UM PROBLEMA COM UMA DAS NOTAS FISCAIS EMITIDAS E TEREMOS QUE EXCLUÍ-LA.
-- SABEMOS QUE O PRODUTO VENDIDO POR ESTA NOTA FISCAL FOI O DE CÓDIGO IGUAL A 3 E
-- ERA O PRIMEIRO ITEM (CD_ITEM=1) DESTA NOTA FISCAL.
-- A NOTA FISCAL FOI EMITIDA NO DIA 15/08/2014 E PERTENCIA O CLIENTE DE CÓDIGO IGUAL A 3.
-- ELABORE A INSTRUÇÃO SQL QUE REALIZARÁ A EXCLUSÃO NECESSÁRIA.

-- Utilize as instruções:
-- COMMIT PARA EFETIVAR A TRANSAÇÃO PENDENTE
-- SELECT PARA REALIZAR A CONSULTA E VERIFICAR SE O COMANDO FOI EXECUTADO COM SUCESSO
-- UTILIZE SUBQUERY PARA ESCREVER A INSTRUÇÃO (UTILIZE PARA VALIDAR A NOTA FISCAL EM QUESTÃO - CLÁUSULA WHERE)
-- OBSERVAÇÃO: REALIZE A CONSULTA ANTES DE EXECUTAR O COMANDO PARA QUE CONSIGA VALIDAR A ALTERAÇÃO
-- RESPONDA:
-- A ALTERAÇÃO FOI REALIZADA COM SUCESSO? 
-- QUAL FOI A MENSAGEM DE ERRO EXIBIDA?
-- JUSTIFIQUE OS MOTIVOS PELO QUAL A ALTERAÇÃO NÃO FOI REALIZADA COM SUCESSO.

DELETE FROM T_SPV_NOTA_FISCAL
      WHERE NR_NOTA_FISCAL = 
            (SELECT NR_NOTA_FISCAL FROM T_SPV_ITEM_NOTA_FISCAL WHERE CD_PRODUTO=3 AND CD_ITEM=1)AND
            DT_EMISSAO = TO_DATE('15/08/2014','DD/MM/YYYY') AND
            CD_CLIENTE=3;

-- EFETIVANDO AS TRANSAÇÕES DE INSERÇÃO NA TABELA
COMMIT;
-- CONSULTANDO A TABELA
SELECT * FROM T_SPV_NOTA_FISCAL ;

SELECT * FROM T_SPV_ITEM_NOTA_FISCAL ;

-- NÃO.
-- ERRO: Erro de SQL: ORA-02292: restrição de integridade (RITA.FK_SPV_ITEMNF_NF) violada - registro filho localizado
-- JUSTIFICATIVA: A CONSTRAINT FOREIGN KEY FOI VIOLADA. 
-- NÃO É POSSÍVEL REALIZAR A DELEÇÃO POIS PARA ELIMINAR A NOTA FISCAL, PRIMEIRAMENTE DEVERIA SER ELEMINADO
-- O ITEM DA NOTA FISCAL CORRESPONDENTE A NOTA FISCAL A SER DELETADA.